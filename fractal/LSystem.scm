#lang racket

(provide (all-defined-out))

(require racket/draw)
(require "common.scm")

(define (draw-by-LSystem canvas config)
  (define *axiom* '())
  (define *angle* '())
  (define *line-length* '())
  (define *iteration* '())
  (define *start-x* '())
  (define *start-y* '())
  (define *start-angle* '())
  (define *rules* '())
  (define (load-config config)
    (set! *axiom* (get-assoc-value config 'axiom))
    (set! *angle* (get-assoc-value config 'angle))
    (set! *line-length* (get-assoc-value config 'line-length))
    (set! *iteration* (get-assoc-value config 'iteration))
    (set! *start-x* (get-assoc-value config 'start-x))
    (set! *start-y* (get-assoc-value config 'start-y))
    (set! *start-angle* (get-assoc-value config 'start-angle))
    (set! *rules* (get-assoc-value config 'rules)))
  
  (define x 0)
  (define y 0)
  (define angle 0)
  (define stack '())
  (define (expand-once actions-string)
    (string-append* (map (lambda (s)
                           (define rule (get-assoc-value *rules* s))
                           (if (not rule) (list->string (list s))
                               rule))
                         (string->list actions-string))))

  (define (expand actions-string iteration)
    (if (<= iteration 0) actions-string
        (expand (expand-once actions-string) (- iteration 1))))

  (define (generate-actions file-path)
    (expand *axiom* *iteration*))
  (define (draw-fractal dc actions)
    (if (null? actions) '()
        (begin
          (perform dc (car actions))
          (draw-fractal dc (cdr actions)))))

  (define (perform dc action)
    (cond
      ((eq? action #\F)
       (send dc draw-lines
             (list (cons x y)
                   (cons (+ x (* *line-length* (sin (degrees->radians angle))))
                         (+ y (* *line-length* (cos (degrees->radians angle)))))))
       (set! x (+ x (* *line-length* (sin (degrees->radians angle)))))
       (set! y (+ y (* *line-length* (cos (degrees->radians angle))))))
      ((eq? action #\+)
       (set! angle (+ angle *angle*)))
      ((eq? action #\-)
       (set! angle (- angle *angle*)))
      ((eq? action #\[)
       (push! stack x)
       (push! stack y)
       (push! stack angle))
      ((eq? action #\])
       (set! angle (pop! stack angle))
       (set! y (pop! stack y))
       (set! x (pop! stack x)))))
  (load-config config)
  (set! x *start-x*)
  (set! y *start-y*)
  (set! angle *start-angle*)
  (draw-fractal (send canvas get-dc) (string->list (cdr config)) (car config)))

